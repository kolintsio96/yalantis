{"version":3,"sources":["components/months/index.module.scss","components/months/month/index.module.scss","components/months/month/index.tsx","components/months/index.tsx","api/index.js","redux/users-reducer.ts","redux/selectors/users-selectors.ts","components/months/monthsContainer.tsx","redux/redux-store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Month","month","users","useState","showUser","setShowUser","mapUsers","map","user","index","className","style","monthListItem","key","firstName","lastName","toggleShowUser","monthTitle","color","onMouseEnter","onMouseLeave","monthList","Months","mapMonths","months","instanse","axios","baseURL","usersAPI","get","then","response","data","initialState","usersReducer","state","action","type","getMonthData","createSelector","usersData","monthNames","usersGroupByMonth","filter","Date","dob","getMonth","usersCount","length","MonthContainer","this","props","getUsers","React","Component","mapDispatchToProps","dispatch","a","compose","connect","rootReducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleWare","App","AppWrapper","SocialApp","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4e3420e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"months\":\"months_months__YR2hK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"month\":\"month_month__1HOoM\",\"monthTitle\":\"month_monthTitle__1lo_3\",\"monthList\":\"month_monthList__1W2VS\",\"monthListItem\":\"month_monthListItem__3Bbb5\"};","import React, {useState} from \"react\";\nimport style from './index.module.scss';\nimport {MonthType, UserType} from '../../../types/types';\n\ntype PropsType = {\n    month:MonthType,\n    users:Array<UserType>,\n}\n\nconst Month:React.FC<PropsType> = ({month, users}) => {\n    let [showUser, setShowUser] = useState(false);\n    let mapUsers = users.map((user, index) => {\n        return <li className={style.monthListItem} key={index}>{user.firstName} {user.lastName}</li>\n    });\n    const toggleShowUser = () => {\n        setShowUser(!showUser);\n    };\n    return (\n        <li className={style.month}>\n            <p className={style.monthTitle} style={{color: month.color}} onMouseEnter={toggleShowUser} onMouseLeave={toggleShowUser}>{month.month}</p>\n            {showUser &&\n                <ul className={style.monthList}>\n                    {mapUsers}\n                </ul>\n            }\n        </li>\n    )\n}\nexport default Month","import React from 'react';\nimport style from './index.module.scss';\nimport Month from \"./month\";\nimport {MonthType} from \"../../types/types\";\ntype Props = {\n    months:Array<MonthType>,\n}\nlet Months:React.FC<Props> = ({months}) => {\n    let mapMonths = months.map((month, index) => {\n        return <Month key={index} month={month} users={month.users}/>\n    });\n    return (\n        <ul className={style.months}>\n            {mapMonths}\n        </ul>\n    )\n}\n\n\nexport default Months","import * as axios from \"axios\";\nlet instanse = axios.create({\n    baseURL: 'https://yalantis-react-school-api.yalantis.com/api/',\n})\nexport const usersAPI = {\n    getUsersData(){\n        return instanse.get(`task0/users`)\n            .then(response => response.data);\n    },\n};","import {usersAPI} from \"../api\";\nimport {UserType} from \"../types/types\";\n\nconst SET_USER = '/users/SET_USER';\n\nexport type InitialStateType = typeof initialState;\ntype SetUsersType = {\n    type: typeof SET_USER,\n    users: Array<UserType>\n};\n\n\nexport let setUsers = (users:Array<UserType>):SetUsersType  => ({type: SET_USER, users: users});\n\nexport let getUsers = () => {\n    return async (dispatch: any) => {\n        let data = await usersAPI.getUsersData();\n        dispatch(setUsers(data));\n    }\n};\nlet initialState = {\n    users: [] as Array<UserType>,\n};\n\nlet usersReducer = (state = initialState, action: any): InitialStateType  => {\n    switch (action.type) {\n        case SET_USER: {\n            return {\n                ...state,\n                users: [...action.users]\n            }\n        }\n        default: {\n            return {...state}\n        }\n    }\n}\n\nexport default usersReducer;","import {AppStateType} from \"../redux-store\";\nimport {createSelector} from \"reselect\";\n\nexport const getUsersData = (state:AppStateType) => {\n    return state.usersData.users;\n};\nexport const getMonthData = createSelector(getUsersData, (users) => {\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return monthNames.map(month => {\n        let usersGroupByMonth = users && users.filter(user => monthNames[new Date(user.dob).getMonth()] === month);\n        let usersCount = usersGroupByMonth.length;\n        return {\n            users: usersGroupByMonth,\n            month: month,\n            color: usersCount <= 2 ? 'gray' : usersCount <= 6 ? 'blue' : usersCount <= 10 ? 'green' : 'red'\n        }\n    });\n});\n","import Months from \"./index\";\nimport {connect} from \"react-redux\";\nimport {getUsers} from \"../../redux/users-reducer\";\nimport React from \"react\";\nimport {compose} from \"redux\";\nimport {getMonthData} from \"./../../redux/selectors/users-selectors\";\nimport {MonthType} from \"../../types/types\";\nimport { AppStateType } from \"../../redux/redux-store\";\n\ntype OwnPropsType = {}\ntype MapPropsType = {\n    months:Array<MonthType>,\n}\ntype MapDispatchType = {\n    getUsers: () => void,\n}\ntype PropsType = MapDispatchType & MapPropsType;\n\nclass MonthContainer extends React.Component<PropsType> {\n    componentDidMount() {\n        this.props.getUsers();\n    }\n    render() {\n        return <>\n            <Months\n                months={this.props.months}\n            />\n        </>\n\n    }\n}\nlet mapStateToProps = (state: AppStateType):MapPropsType => {\n    return {\n        months: getMonthData(state)\n    }\n}\nlet mapDispatchToProps = {getUsers}\n\nexport default compose(\n    connect<MapPropsType, MapDispatchType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)\n)(MonthContainer)","import {createStore, combineReducers, applyMiddleware, compose} from 'redux';\nimport thunkMiddleWare from 'redux-thunk';\nimport usersReducer from \"./users-reducer\";\n\n\nlet rootReducers = combineReducers({\n    usersData: usersReducer,\n});\n\ntype RootReducerType = typeof rootReducers;\nexport type AppStateType = ReturnType<RootReducerType>;\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducers, composeEnhancers(applyMiddleware(thunkMiddleWare)));\n\nexport default store;","import React from 'react';\nimport style from './index.module.scss';\nimport Months from \"./components/months/monthsContainer\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\n\n\nclass App extends React.Component{\n  render() {\n    return (\n        <div className={style.AppWrapper}>\n          <Months/>\n        </div>\n    );\n  }\n}\nlet SocialApp = () => {\n  return(\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  )\n};\nexport default SocialApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}